local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer

-- Randomize Name Function
local function generateRandomName()
    local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local name = ""
    for _ = 1, 32 do
        name = name .. chars:sub(math.random(1, #chars), math.random(1, #chars))
    end
    return name
end

-- UI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = generateRandomName()
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = CoreGui

local MainFrame = Instance.new("Frame")
MainFrame.Name = generateRandomName()
MainFrame.Size = UDim2.new(0, 160, 0, 232)
MainFrame.Position = UDim2.new(0.5, -80, 0.5, -116)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local UICorner = Instance.new("UICorner")
UICorner.Name = generateRandomName()
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = MainFrame

local TitleBar = Instance.new("Frame")
TitleBar.Name = generateRandomName()
TitleBar.Size = UDim2.new(1, 0, 0, 24)
TitleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainFrame

local TitleCorner = Instance.new("UICorner")
TitleCorner.Name = generateRandomName()
TitleCorner.CornerRadius = UDim.new(0, 10)
TitleCorner.Parent = TitleBar

local Title = Instance.new("TextLabel")
Title.Name = generateRandomName()
Title.Size = UDim2.new(0.7, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Text = "Sword Bot"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 14
Title.Font = Enum.Font.GothamBold
Title.Parent = TitleBar

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = generateRandomName()
MinimizeButton.Size = UDim2.new(0, 24, 0, 24)
MinimizeButton.Position = UDim2.new(1, -48, 0, 0)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
MinimizeButton.Text = "−"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Parent = TitleBar

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.Name = generateRandomName()
MinimizeCorner.CornerRadius = UDim.new(0, 10)
MinimizeCorner.Parent = MinimizeButton

local CloseButton = Instance.new("TextButton")
CloseButton.Name = generateRandomName()
CloseButton.Size = UDim2.new(0, 24, 0, 24)
CloseButton.Position = UDim2.new(1, -24, 0, 0)
CloseButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 220, 220)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Parent = TitleBar

local CloseCorner = Instance.new("UICorner")
CloseCorner.Name = generateRandomName()
CloseCorner.CornerRadius = UDim.new(0, 10)
CloseCorner.Parent = CloseButton

local ContentFrame = Instance.new("Frame")
ContentFrame.Name = generateRandomName()
ContentFrame.Size = UDim2.new(1, 0, 1, -24)
ContentFrame.Position = UDim2.new(0, 0, 0, 24)
ContentFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
ContentFrame.BorderSizePixel = 0
ContentFrame.Parent = MainFrame

local ContentCorner = Instance.new("UICorner")
ContentCorner.Name = generateRandomName()
ContentCorner.CornerRadius = UDim.new(0, 10)
ContentCorner.Parent = ContentFrame

local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = generateRandomName()
ToggleButton.Size = UDim2.new(0, 96, 0, 32)
ToggleButton.Position = UDim2.new(0.5, -48, 0, 16)
ToggleButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
ToggleButton.Text = "Bot: OFF"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextSize = 12
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Parent = ContentFrame

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.Name = generateRandomName()
ToggleCorner.CornerRadius = UDim.new(0, 10)
ToggleCorner.Parent = ToggleButton

local HuntButton = Instance.new("TextButton")
HuntButton.Name = generateRandomName()
HuntButton.Size = UDim2.new(0, 96, 0, 32)
HuntButton.Position = UDim2.new(0.5, -48, 0, 56)
HuntButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
HuntButton.Text = "Hunt: OFF"
HuntButton.TextColor3 = Color3.fromRGB(255, 255, 255)
HuntButton.TextSize = 12
HuntButton.Font = Enum.Font.GothamBold
HuntButton.Parent = ContentFrame

local HuntCorner = Instance.new("UICorner")
HuntCorner.Name = generateRandomName()
HuntCorner.CornerRadius = UDim.new(0, 10)
HuntCorner.Parent = HuntButton

local ReachButton = Instance.new("TextButton")
ReachButton.Name = generateRandomName()
ReachButton.Size = UDim2.new(0, 96, 0, 32)
ReachButton.Position = UDim2.new(0.5, -48, 0, 96)
ReachButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
ReachButton.Text = "Reach: OFF"
ReachButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ReachButton.TextSize = 12
ReachButton.Font = Enum.Font.GothamBold
ReachButton.Parent = ContentFrame

local ReachCorner = Instance.new("UICorner")
ReachCorner.Name = generateRandomName()
ReachCorner.CornerRadius = UDim.new(0, 10)
ReachCorner.Parent = ReachButton

local TargetLabel = Instance.new("TextLabel")
TargetLabel.Name = generateRandomName()
TargetLabel.Size = UDim2.new(0, 96, 0, 40)
TargetLabel.Position = UDim2.new(0.5, -48, 0, 136)
TargetLabel.BackgroundTransparency = 1
TargetLabel.Text = "Target:\nNone"
TargetLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetLabel.TextSize = 12
TargetLabel.Font = Enum.Font.GothamBold
TargetLabel.TextWrapped = true
TargetLabel.Parent = ContentFrame

-- UI Functionality
local minimized = false
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)

MinimizeButton.MouseButton1Click:Connect(function()
    if minimized then
        local tween = TweenService:Create(MainFrame, tweenInfo, {Size = UDim2.new(0, 160, 0, 232)})
        tween:Play()
        tween.Completed:Wait()
        MinimizeButton.Text = "−"
        ContentFrame.Visible = true
        minimized = false
    else
        local tween = TweenService:Create(MainFrame, tweenInfo, {Size = UDim2.new(0, 160, 0, 24)})
        ContentFrame.Visible = false
        tween:Play()
        tween.Completed:Wait()
        MinimizeButton.Text = "+"
        minimized = true
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(MainFrame, tweenInfo, {
        Size = UDim2.new(0, 160, 0, 0),
        BackgroundTransparency = 1
    })
    tween:Play()
    for _, child in pairs(MainFrame:GetDescendants()) do
        if child:IsA("GuiObject") then
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                TweenService:Create(child, tweenInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
            elseif child:IsA("Frame") then
                TweenService:Create(child, tweenInfo, {BackgroundTransparency = 1}):Play()
            end
        end
    end
    tween.Completed:Wait()
    ScreenGui:Destroy()
    if _G.e then
        _G.e:Disconnect()
    end
    if _G.targetHighlight then
        _G.targetHighlight:Destroy()
        _G.targetHighlight = nil
    end
    if getgenv().configs and getgenv().configs.connections then
        local Disable = getgenv().configs.Disable
        for _, v in ipairs(getgenv().configs.connections) do
            v:Disconnect()
        end
        Disable:Fire()
        Disable:Destroy()
        table.clear(getgenv().configs)
    end
end)

-- Draggable GUI
local dragging, dragInput, dragStart, startPos
TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Sword Bot Script
_G.x = nil -- target
_G.huntMode = false -- Hunt mode state
_G.reachMode = false -- Reach mode state
_G.targetHighlight = nil -- Highlight for target
Grips = {
    Up = CFrame.new(0, 0, -1.70000005, 0, 0, 1, 1, 0, 0, 0, 1, 0),
    Out = CFrame.new(0, 0, -1.70000005, 0, 1, 0, 1, -0, 0, 0, 0, -1)
}

_G.e = nil
_G.y = 0 -- Bot mode off
local h3 = 0
local h4 = false
local h = 4 -- Toned-down strafing
local h2 = 0
_G.g = nil
_G.pos = nil
local jo = 0
local jo2 = 1
local hhh = false
local jo3 = 0

-- Reach Script Setup
local connections = getgenv().configs and getgenv().configs.connections
if connections then
    local Disable = getgenv().configs.Disable
    for _, v in ipairs(connections) do
        v:Disconnect()
    end
    Disable:Fire()
    Disable:Destroy()
    table.clear(getgenv().configs)
end

local Disable = Instance.new("BindableEvent")
getgenv().configs = {
    connections = {},
    Disable = Disable,
    Size = Vector3.new(7, 7, 7),
    DeathCheck = true
}

local Ignorelist = OverlapParams.new()
Ignorelist.FilterType = Enum.RaycastFilterType.Include

local function getchar(plr)
    local plr = plr or player
    return plr.Character
end

local function gethumanoid(plr)
    local char = plr:IsA("Model") and plr or getchar(plr)
    if char then
        return char:FindFirstChildWhichIsA("Humanoid")
    end
end

local function IsAlive(Humanoid)
    return Humanoid and Humanoid.Health > 0
end

local function GetTouchInterest(Tool)
    return Tool and Tool:FindFirstChildWhichIsA("TouchTransmitter", true)
end

local function GetCharacters(LocalPlayerChar)
    local Characters = {}
    for _, v in ipairs(Players:GetPlayers()) do
        table.insert(Characters, getchar(v))
    end
    table.remove(Characters, table.find(Characters, LocalPlayerChar))
    return Characters
end

local function Attack(Tool, TouchPart, ToTouch)
    if Tool:IsDescendantOf(Workspace) then
        Tool:Activate()
        firetouchinterest(TouchPart, ToTouch, 1)
        firetouchinterest(TouchPart, ToTouch, 0)
    end
end

table.insert(getgenv().configs.connections, Disable.Event:Connect(function()
    _G.reachMode = false
    ReachButton.Text = "Reach: OFF"
    ReachButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
end))

-- Reach Loop (runs regardless of _G.y)
table.insert(getgenv().configs.connections, RunService.Heartbeat:Connect(function()
    if _G.reachMode then
        local char = getchar()
        if IsAlive(gethumanoid(char)) then
            local Tool = char and char:FindFirstChildWhichIsA("Tool")
            local TouchInterest = Tool and GetTouchInterest(Tool)
            if TouchInterest then
                local TouchPart = TouchInterest.Parent
                local Characters = GetCharacters(char)
                Ignorelist.FilterDescendantsInstances = Characters
                local InstancesInBox = Workspace:GetPartBoundsInBox(TouchPart.CFrame, TouchPart.Size + getgenv().configs.Size, Ignorelist)
                for _, v in ipairs(InstancesInBox) do
                    local Character = v:FindFirstAncestorWhichIsA("Model")
                    if table.find(Characters, Character) then
                        if getgenv().configs.DeathCheck then
                            if IsAlive(gethumanoid(Character)) then
                                Attack(Tool, TouchPart, v)
                            end
                        else
                            Attack(Tool, TouchPart, v)
                        end
                    end
                end
            end
        end
    end
end))

-- Toggle Bot Mode Logic
local function toggleBot()
    if _G.y == 1 then
        _G.y = 0
        ToggleButton.Text = "Bot: OFF"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
        _G.x = nil -- Clear target
        if _G.targetHighlight then
            _G.targetHighlight:Destroy()
            _G.targetHighlight = nil
        end
        TargetLabel.Text = "Target:\nNone"
    else
        _G.y = 1
        ToggleButton.Text = "Bot: ON"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(70, 130, 70)
    end
end

ToggleButton.MouseButton1Click:Connect(toggleBot)

-- Hunt Mode Logic
local function toggleHunt()
    if _G.huntMode then
        _G.huntMode = false
        _G.x = nil -- Reset target
        if _G.targetHighlight then
            _G.targetHighlight:Destroy()
            _G.targetHighlight = nil
        end
        HuntButton.Text = "Hunt: OFF"
        HuntButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
        TargetLabel.Text = "Target:\nNone"
    else
        _G.huntMode = true
        HuntButton.Text = "Hunt: ON"
        HuntButton.BackgroundColor3 = Color3.fromRGB(70, 130, 70)
        -- Immediately attempt to lock onto the nearest player if available.
        local closestRootPart = findClosestHumanoidRootPart()
        if closestRootPart then
            _G.x = closestRootPart
            TargetLabel.Text = "Target:\n" .. _G.x.Name
            if _G.targetHighlight then
                _G.targetHighlight:Destroy()
            end
            _G.targetHighlight = Instance.new("Highlight")
            _G.targetHighlight.Name = generateRandomName()
            _G.targetHighlight.OutlineColor = Color3.fromRGB(255, 0, 0)
            _G.targetHighlight.FillTransparency = 1
            _G.targetHighlight.Adornee = _G.x
            _G.targetHighlight.Parent = _G.x
        else
            _G.huntMode = false
            HuntButton.Text = "Hunt: OFF"
            HuntButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
            TargetLabel.Text = "Target:\nNone"
        end
    end
end

HuntButton.MouseButton1Click:Connect(toggleHunt)

-- Reach Mode Logic
local function toggleReach()
    if _G.reachMode then
        _G.reachMode = false
        ReachButton.Text = "Reach: OFF"
        ReachButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
        if getgenv().configs and getgenv().configs.connections then
            local Disable = getgenv().configs.Disable
            for _, v in ipairs(getgenv().configs.connections) do
                v:Disconnect()
            end
            Disable:Fire()
            table.clear(getgenv().configs.connections)
        end
    else
        _G.reachMode = true
        ReachButton.Text = "Reach: ON"
        ReachButton.BackgroundColor3 = Color3.fromRGB(70, 130, 70)
    end
end

ReachButton.MouseButton1Click:Connect(toggleReach)

-- Keybinds
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.KeyCode == Enum.KeyCode.R then
        toggleBot()
    elseif input.KeyCode == Enum.KeyCode.H then
        toggleHunt()
    elseif input.KeyCode == Enum.KeyCode.T then
        toggleReach()
    end
end)

-- Modified findClosestHumanoidRootPart function remains unchanged.
local function findClosestHumanoidRootPart()
    local closestRootPart = nil
    local closestDistance = math.huge
    local localPlayerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
    if not localPlayerPosition then return nil end
    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name == "HumanoidRootPart" and part.Parent ~= player.Character then
            local humanoid = part.Parent:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local distance = (part.Position - localPlayerPosition).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestRootPart = part.Parent
                end
            end
        end
    end
    return closestRootPart
end

-- AutoTarget logic:
-- If hunt mode is enabled: 
--   if there is no current target, assign one to the nearest player;
--   if there is a target, check its health – if it is dead, turn off hunt mode.
-- If bot mode is enabled (and hunt mode is off), update target continuously.
local function autoTarget()
    if _G.huntMode then
        if _G.x then
            local humanoid = _G.x:FindFirstChild("Humanoid")
            if not humanoid or humanoid.Health <= 0 then
                if _G.targetHighlight then
                    _G.targetHighlight:Destroy()
                    _G.targetHighlight = nil
                end
                _G.x = nil
                _G.huntMode = false
                HuntButton.Text = "Hunt: OFF"
                HuntButton.BackgroundColor3 = Color3.fromRGB(140,50,50)
                TargetLabel.Text = "Target:\nNone"
            end
        else
            -- No target yet: immediately assign the nearest target
            local closestRootPart = findClosestHumanoidRootPart()
            if closestRootPart then
                _G.x = closestRootPart
                TargetLabel.Text = "Target:\n" .. _G.x.Name
                if _G.targetHighlight then
                    _G.targetHighlight:Destroy()
                end
                _G.targetHighlight = Instance.new("Highlight")
                _G.targetHighlight.Name = generateRandomName()
                _G.targetHighlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                _G.targetHighlight.FillTransparency = 1
                _G.targetHighlight.Adornee = _G.x
                _G.targetHighlight.Parent = _G.x
            end
        end
    elseif _G.y == 1 then -- Bot mode active.
        local closestRootPart = findClosestHumanoidRootPart()
        if closestRootPart then
            _G.x = closestRootPart
            TargetLabel.Text = "Target:\n" .. _G.x.Name
            if _G.targetHighlight then
                _G.targetHighlight:Destroy()
            end
            _G.targetHighlight = Instance.new("Highlight")
            _G.targetHighlight.Name = generateRandomName()
            _G.targetHighlight.OutlineColor = Color3.fromRGB(255, 0, 0)
            _G.targetHighlight.FillTransparency = 1
            _G.targetHighlight.Adornee = _G.x
            _G.targetHighlight.Parent = _G.x
        else
            _G.x = nil
            if _G.targetHighlight then
                _G.targetHighlight:Destroy()
                _G.targetHighlight = nil
            end
            TargetLabel.Text = "Target:\nNone"
        end
    end
end

-- RunService Heartbeat triggers autoTarget as long as either hunt mode or bot mode is active.
RunService.Heartbeat:Connect(function()
    if _G.huntMode or _G.y == 1 then
        autoTarget()
    end
end)

-- Original script core for movement and behavior
local numba = Instance.new("NumberValue", Workspace)
numba.Value = -40
delay(0, function()
    while true do
        task.wait(0.14)
        numba.Value = math.random(-120, -40) -- Toned-down turns
        TweenService:Create(numba, TweenInfo.new(0.07, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 1, true, 0), { Value = math.random(40, 120) }):Play()
    end
end)

delay(5, function()
    local bg = Instance.new("BodyGyro", ReplicatedStorage)
    bg.D = 1
    bg.CFrame = CFrame.new((player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.CFrame.LookVector) or Vector3.new(0, 0, 1))
    bg.P = 30000
    bg.MaxTorque = Vector3.new(400000000, 400000000, 400000000)

    RunService.RenderStepped:Connect(function()
        if _G.x and _G.x:FindFirstChild("HumanoidRootPart") and _G.y == 1 and player.Character and player.Character.Humanoid.Health > 0 then
            if _G.x:FindFirstChild("Humanoid") and _G.x.Humanoid.Health > 0 then
                bg.Parent = player.Character.HumanoidRootPart
                local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                if h2 == 0 then
                    torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                elseif h2 == 1 then
                    torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 20)
                end
                bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(20), 0)
                _G.pos = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * 0 + player.Character.HumanoidRootPart.CFrame.RightVector * 6

                if _G.x.HumanoidRootPart.Position.y - 0.5 > player.Character.HumanoidRootPart.Position.y then
                    delay(0, function() player.Character.Humanoid.Jump = true end)
                end
                if _G.x.HumanoidRootPart.Velocity.z >= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.x.HumanoidRootPart.Velocity.x >= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                    _G.pos = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + player.Character.HumanoidRootPart.CFrame.RightVector * 6 - _G.x.HumanoidRootPart.Velocity / 2
                    local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                    local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                    if h2 == 0 then
                        torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                    elseif h2 == 1 then
                        torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 20)
                    end
                    bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(20), 0)
                    if (_G.x.HumanoidRootPart.Position - player.Character.HumanoidRootPart.CFrame.p).Magnitude <= 10 then
                        _G.pos = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character.HumanoidRootPart.CFrame.RightVector * 1 + player.Character.HumanoidRootPart.CFrame.LookVector * -1) - _G.x.HumanoidRootPart.Velocity / 5 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                        jo = jo + 1
                        if jo == 3 then
                            h = h * -1
                        end
                    end
                elseif _G.x.HumanoidRootPart.Velocity.z <= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.x.HumanoidRootPart.Velocity.x <= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                    _G.pos = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + player.Character.HumanoidRootPart.CFrame.RightVector * 6 + _G.x.HumanoidRootPart.Velocity / 10
                    local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                    local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                    if h2 == 0 then
                        torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                    elseif h2 == 1 then
                        torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 20)
                    end
                    bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(20), 0)
                    if (_G.x.HumanoidRootPart.Position - player.Character.HumanoidRootPart.CFrame.p).Magnitude <= 10 then
                        _G.pos = player.Character.HumanoidRootPart.CFrame.LookVector * 5 * jo2 + _G.x.HumanoidRootPart.CFrame.RightVector * 1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character.HumanoidRootPart.CFrame.RightVector * 1 + player.Character.HumanoidRootPart.CFrame.LookVector * -1) + _G.x.HumanoidRootPart.Velocity / 3 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                        jo = jo + 1
                        if jo == 3 then
                            h = h * -1
                        end
                    end
                end
                if (_G.x.HumanoidRootPart.Position - player.Character.HumanoidRootPart.CFrame.p).Magnitude <= 10 then
                    h2 = 1
                else
                    h2 = 0
                end
                if (_G.x.HumanoidRootPart.Position - player.Character.HumanoidRootPart.CFrame.p).Magnitude <= 15 then
                    if (_G.x.HumanoidRootPart.Position - player.Character["Right Arm"].CFrame.p).Magnitude <= 5 or hhh == true then
                        hhh = true
                        if (_G.x.HumanoidRootPart.Position - player.Character["Right Arm"].CFrame.p).Magnitude >= 7 then
                            hhh = false
                        end
                        if jo2 == 0 then
                            jo2 = -2
                        else
                            jo2 = 0
                        end
                        _G.pos = player.Character.HumanoidRootPart.CFrame.LookVector * 5 * jo2 + _G.x.HumanoidRootPart.Velocity / 20
                        if _G.x.HumanoidRootPart.Velocity.z >= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.x.HumanoidRootPart.Velocity.x >= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                            _G.pos = player.Character.HumanoidRootPart.CFrame.LookVector * 5 * jo2 + _G.x.HumanoidRootPart.CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + player.Character.HumanoidRootPart.CFrame.RightVector * 6 - _G.x.HumanoidRootPart.Velocity / 2
                            local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                            local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                            if h2 == 0 then
                                torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                            elseif h2 == 1 then
                                torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 20)
                            end
                            bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(20), 0)
                            bg.D = 1
                            if (_G.x.HumanoidRootPart.Position - player.Character.HumanoidRootPart.CFrame.p).Magnitude <= 10 then
                                _G.pos = player.Character.HumanoidRootPart.CFrame.LookVector * 5 * jo2 + _G.x.HumanoidRootPart.CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character.HumanoidRootPart.CFrame.RightVector * 1 + player.Character.HumanoidRootPart.CFrame.LookVector * -1) - _G.x.HumanoidRootPart.Velocity / 5 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                                jo = jo + 1
                                if jo == 3 then
                                    h = h * -1
                                end
                            end
                        elseif _G.x.HumanoidRootPart.Velocity.z <= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.x.HumanoidRootPart.Velocity.x <= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                            _G.pos = player.Character.HumanoidRootPart.CFrame.LookVector * 5 * jo2 + _G.x.HumanoidRootPart.CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + player.Character.HumanoidRootPart.CFrame.RightVector * 6 + _G.x.HumanoidRootPart.Velocity / 10
                            local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                            local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                            if h2 == 0 then
                                torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                            elseif h2 == 1 then
                                torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 20)
                            end
                            bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(20), 0)
                            if (_G.x.HumanoidRootPart.Position - player.Character.HumanoidRootPart.CFrame.p).Magnitude <= 10 then
                                _G.pos = player.Character.HumanoidRootPart.CFrame.LookVector * 5 * jo2 + _G.x.HumanoidRootPart.CFrame.RightVector * 1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character.HumanoidRootPart.CFrame.RightVector * 1 + player.Character.HumanoidRootPart.CFrame.LookVector * -1) + _G.x.HumanoidRootPart.Velocity / 3 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                                jo = jo + 1
                                if jo == 3 then
                                    h = h * -1
                                end
                            end
                        end
                        player.Character.Humanoid:Move(_G.pos)
                    end
                    if not _G.reachMode then -- Spam sword at <= 15 studs
                        if player.Character:FindFirstChildOfClass("Tool") then
                            player.Character:FindFirstChildOfClass("Tool"):Activate()
                        end
                    end
                end
                player.Character.Humanoid:MoveTo(_G.pos)
            else
                _G.x = nil
                if _G.targetHighlight then
                    _G.targetHighlight:Destroy()
                    _G.targetHighlight = nil
                end
                TargetLabel.Text = "Target:\nNone"
            end
        else
            bg.Parent = ReplicatedStorage
        end
    end)
end)
