local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer

-- Settings (All Configurable Parameters)
local Settings = {
    -- Reach Settings
    ReachRadius = 7, -- Default 7 studs
    DeathCheck = true, -- Check if target is alive before hitting
    SwordSpamCooldown = 0.1, -- Cooldown for sword activation (seconds)
    SwordSpamDistance = 12.5, -- Fixed distance to spam sword (studs)

    -- Bot Settings
    StrafeDistance = 4,
    CirclingMin = -120,
    CirclingMax = 120,
    CirclingDivider = 20,
    LookAngle = 20,
    TargetSwitchThreshold = 5, -- Not used for switching, kept for future
    AutoTargetCheckInterval = 0.001, -- Fastest check interval (seconds)

    -- UI Settings
    MainFrameSize = UDim2.new(0, 160, 0, 240), -- Smaller height
    MainFramePosition = UDim2.new(0.5, -80, 0.5, -120),
    MainFrameColor = Color3.fromRGB(25, 25, 30),
    TitleBarSize = UDim2.new(1, 0, 0, 24),
    TitleBarColor = Color3.fromRGB(30, 30, 35),
    ContentFrameColor = Color3.fromRGB(35, 35, 40),
    ButtonSize = UDim2.new(0, 96, 0, 32),
    ToggleButtonPosition = UDim2.new(0.5, -48, 0, 16),
    HuntButtonPosition = UDim2.new(0.5, -48, 0, 56),
    ReachButtonPosition = UDim2.new(0.5, -48, 0, 96),
    ReachDistanceLabelPosition = UDim2.new(0.5, -48, 0, 136),
    ReachDistanceTextBoxPosition = UDim2.new(0.5, -40, 0, 158),
    ReachDistanceTextBoxSize = UDim2.new(0, 80, 0, 20), -- Shorter text box
    MinusButtonPosition = UDim2.new(0.5, -68, 0, 158),
    PlusButtonPosition = UDim2.new(0.5, 44, 0, 158),
    TargetLabelPosition = UDim2.new(0.5, -48, 0, 178),
    TargetLabelSize = UDim2.new(0, 96, 0, 40),
    MinimizeButtonSize = UDim2.new(0, 24, 0, 24),
    MinimizeButtonPosition = UDim2.new(1, -48, 0, 0),
    MinimizeButtonColor = Color3.fromRGB(40, 40, 45),
    CloseButtonSize = UDim2.new(0, 24, 0, 24),
    CloseButtonPosition = UDim2.new(1, -24, 0, 0),
    CloseButtonColor = Color3.fromRGB(140, 50, 50),
    ButtonOffColor = Color3.fromRGB(140, 50, 50),
    ButtonOnColor = Color3.fromRGB(70, 130, 70),
    TextColor = Color3.fromRGB(255, 255, 255),
    CloseButtonTextColor = Color3.fromRGB(255, 220, 220),
    CornerRadius = UDim.new(0, 12),
    TitleTextSize = 14,
    ButtonTextSize = 12,
    MinimizeTextSize = 16,
}

-- Randomize Name Function
local function generateRandomName()
    local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local name = ""
    for _ = 1, 32 do
        name = name .. chars:sub(math.random(1, #chars), math.random(1, #chars))
    end
    return name
end

-- UI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = generateRandomName()
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = CoreGui

local MainFrame = Instance.new("Frame")
MainFrame.Name = generateRandomName()
MainFrame.Size = Settings.MainFrameSize
MainFrame.Position = Settings.MainFramePosition
MainFrame.BackgroundColor3 = Settings.MainFrameColor
MainFrame.BorderSizePixel = 0
MainFrame.Visible = true
MainFrame.Parent = ScreenGui

local UICorner = Instance.new("UICorner")
UICorner.Name = generateRandomName()
UICorner.CornerRadius = Settings.CornerRadius
UICorner.Parent = MainFrame

local TitleBar = Instance.new("Frame")
TitleBar.Name = generateRandomName()
TitleBar.Size = Settings.TitleBarSize
TitleBar.BackgroundColor3 = Settings.TitleBarColor
TitleBar.BorderSizePixel = 0
TitleBar.Visible = true
TitleBar.Parent = MainFrame

local TitleCorner = Instance.new("UICorner")
TitleCorner.Name = generateRandomName()
TitleCorner.CornerRadius = Settings.CornerRadius
TitleCorner.Parent = TitleBar

local Title = Instance.new("TextLabel")
Title.Name = generateRandomName()
Title.Size = UDim2.new(0.7, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Text = "Sword Bot"
Title.TextColor3 = Settings.TextColor
Title.TextSize = Settings.TitleTextSize
Title.Font = Enum.Font.GothamBold
Title.Visible = true
Title.Parent = TitleBar

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = generateRandomName()
MinimizeButton.Size = Settings.MinimizeButtonSize
MinimizeButton.Position = Settings.MinimizeButtonPosition
MinimizeButton.BackgroundColor3 = Settings.MinimizeButtonColor
MinimizeButton.Text = "−"
MinimizeButton.TextColor3 = Settings.TextColor
MinimizeButton.TextSize = Settings.MinimizeTextSize
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Visible = true
MinimizeButton.Parent = TitleBar

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.Name = generateRandomName()
MinimizeCorner.CornerRadius = Settings.CornerRadius
MinimizeCorner.Parent = MinimizeButton

local CloseButton = Instance.new("TextButton")
CloseButton.Name = generateRandomName()
CloseButton.Size = Settings.CloseButtonSize
CloseButton.Position = Settings.CloseButtonPosition
CloseButton.BackgroundColor3 = Settings.CloseButtonColor
CloseButton.Text = "X"
CloseButton.TextColor3 = Settings.CloseButtonTextColor
CloseButton.TextSize = Settings.MinimizeTextSize
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Visible = true
CloseButton.Parent = TitleBar

local CloseCorner = Instance.new("UICorner")
CloseCorner.Name = generateRandomName()
CloseCorner.CornerRadius = Settings.CornerRadius
CloseCorner.Parent = CloseButton

local ContentFrame = Instance.new("Frame")
ContentFrame.Name = generateRandomName()
ContentFrame.Size = UDim2.new(1, 0, 1, -24)
ContentFrame.Position = UDim2.new(0, 0, 0, 24)
ContentFrame.BackgroundColor3 = Settings.ContentFrameColor
ContentFrame.BorderSizePixel = 0
ContentFrame.Visible = true
ContentFrame.Parent = MainFrame

local ContentCorner = Instance.new("UICorner")
ContentCorner.Name = generateRandomName()
ContentCorner.CornerRadius = Settings.CornerRadius
ContentCorner.Parent = ContentFrame

local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = generateRandomName()
ToggleButton.Size = Settings.ButtonSize
ToggleButton.Position = Settings.ToggleButtonPosition
ToggleButton.BackgroundColor3 = Settings.ButtonOffColor
ToggleButton.Text = "Bot: OFF"
ToggleButton.TextColor3 = Settings.TextColor
ToggleButton.TextSize = Settings.ButtonTextSize
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Visible = true
ToggleButton.Parent = ContentFrame

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.Name = generateRandomName()
ToggleCorner.CornerRadius = Settings.CornerRadius
ToggleCorner.Parent = ToggleButton

local HuntButton = Instance.new("TextButton")
HuntButton.Name = generateRandomName()
HuntButton.Size = Settings.ButtonSize
HuntButton.Position = Settings.HuntButtonPosition
HuntButton.BackgroundColor3 = Settings.ButtonOffColor
HuntButton.Text = "Hunt: OFF"
HuntButton.TextColor3 = Settings.TextColor
HuntButton.TextSize = Settings.ButtonTextSize
HuntButton.Font = Enum.Font.GothamBold
HuntButton.Visible = true
HuntButton.Parent = ContentFrame

local HuntCorner = Instance.new("UICorner")
HuntCorner.Name = generateRandomName()
HuntCorner.CornerRadius = Settings.CornerRadius
HuntCorner.Parent = HuntButton

local ReachButton = Instance.new("TextButton")
ReachButton.Name = generateRandomName()
ReachButton.Size = Settings.ButtonSize
ReachButton.Position = Settings.ReachButtonPosition
ReachButton.BackgroundColor3 = Settings.ButtonOffColor
ReachButton.Text = "Reach: OFF"
ReachButton.TextColor3 = Settings.TextColor
ReachButton.TextSize = Settings.ButtonTextSize
ReachButton.Font = Enum.Font.GothamBold
ReachButton.Visible = true
ReachButton.Parent = ContentFrame

local ReachCorner = Instance.new("UICorner")
ReachCorner.Name = generateRandomName()
ReachCorner.CornerRadius = Settings.CornerRadius
ReachCorner.Parent = ReachButton

local ReachDistanceLabel = Instance.new("TextLabel")
ReachDistanceLabel.Name = generateRandomName()
ReachDistanceLabel.Size = UDim2.new(0, 96, 0, 16)
ReachDistanceLabel.Position = Settings.ReachDistanceLabelPosition
ReachDistanceLabel.BackgroundTransparency = 1
ReachDistanceLabel.Text = "Reach Distance"
ReachDistanceLabel.TextColor3 = Settings.TextColor
ReachDistanceLabel.TextSize = 10
ReachDistanceLabel.Font = Enum.Font.GothamBold
ReachDistanceLabel.TextWrapped = true
ReachDistanceLabel.Visible = true
ReachDistanceLabel.Parent = ContentFrame

local ReachDistanceTextBox = Instance.new("TextBox")
ReachDistanceTextBox.Name = generateRandomName()
ReachDistanceTextBox.Size = Settings.ReachDistanceTextBoxSize
ReachDistanceTextBox.Position = Settings.ReachDistanceTextBoxPosition
ReachDistanceTextBox.BackgroundColor3 = Settings.MinimizeButtonColor
ReachDistanceTextBox.Text = tostring(Settings.ReachRadius)
ReachDistanceTextBox.TextColor3 = Settings.TextColor
ReachDistanceTextBox.TextSize = Settings.ButtonTextSize
ReachDistanceTextBox.Font = Enum.Font.GothamBold
ReachDistanceTextBox.TextWrapped = true
ReachDistanceTextBox.Visible = true
ReachDistanceTextBox.Parent = ContentFrame

local TextBoxCorner = Instance.new("UICorner")
TextBoxCorner.Name = generateRandomName()
TextBoxCorner.CornerRadius = Settings.CornerRadius
TextBoxCorner.Parent = ReachDistanceTextBox

local MinusButton = Instance.new("TextButton")
MinusButton.Name = generateRandomName()
MinusButton.Size = UDim2.new(0, 24, 0, 24)
MinusButton.Position = Settings.MinusButtonPosition
MinusButton.BackgroundColor3 = Settings.ButtonOffColor
MinusButton.Text = "−"
MinusButton.TextColor3 = Settings.TextColor
MinusButton.TextSize = Settings.MinimizeTextSize
MinusButton.Font = Enum.Font.GothamBold
MinusButton.Visible = true
MinusButton.Parent = ContentFrame

local MinusCorner = Instance.new("UICorner")
MinusCorner.Name = generateRandomName()
MinusCorner.CornerRadius = Settings.CornerRadius
MinusCorner.Parent = MinusButton

local PlusButton = Instance.new("TextButton")
PlusButton.Name = generateRandomName()
PlusButton.Size = UDim2.new(0, 24, 0, 24)
PlusButton.Position = Settings.PlusButtonPosition
PlusButton.BackgroundColor3 = Settings.ButtonOnColor
PlusButton.Text = "+"
PlusButton.TextColor3 = Settings.TextColor
PlusButton.TextSize = Settings.MinimizeTextSize
PlusButton.Font = Enum.Font.GothamBold
PlusButton.Visible = true
PlusButton.Parent = ContentFrame

local PlusCorner = Instance.new("UICorner")
PlusCorner.Name = generateRandomName()
PlusCorner.CornerRadius = Settings.CornerRadius
PlusCorner.Parent = PlusButton

local TargetLabel = Instance.new("TextLabel")
TargetLabel.Name = generateRandomName()
TargetLabel.Size = Settings.TargetLabelSize
TargetLabel.Position = Settings.TargetLabelPosition
TargetLabel.BackgroundTransparency = 1
TargetLabel.Text = "Target:\nNone"
TargetLabel.TextColor3 = Settings.TextColor
TargetLabel.TextSize = Settings.ButtonTextSize
TargetLabel.Font = Enum.Font.GothamBold
TargetLabel.TextWrapped = true
TargetLabel.Visible = true
TargetLabel.Parent = ContentFrame

-- UI Functionality
local minimized = false
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)

MinimizeButton.MouseButton1Click:Connect(function()
    if minimized then
        local tween = TweenService:Create(MainFrame, tweenInfo, {Size = Settings.MainFrameSize})
        tween:Play()
        tween.Completed:Wait()
        MinimizeButton.Text = "−"
        ContentFrame.Visible = true
        minimized = false
    else
        local tween = TweenService:Create(MainFrame, tweenInfo, {Size = UDim2.new(0, 160, 0, 24)})
        ContentFrame.Visible = false
        tween:Play()
        tween.Completed:Wait()
        MinimizeButton.Text = "+"
        minimized = true
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(MainFrame, tweenInfo, {
        Size = UDim2.new(0, 160, 0, 0),
        BackgroundTransparency = 1
    })
    tween:Play()
    for _, child in pairs(MainFrame:GetDescendants()) do
        if child:IsA("GuiObject") then
            if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
                TweenService:Create(child, tweenInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
            elseif child:IsA("Frame") then
                TweenService:Create(child, tweenInfo, {BackgroundTransparency = 1}):Play()
            end
        end
    end
    tween.Completed:Wait()
    ScreenGui:Destroy()
    if _G.e then
        _G.e:Disconnect()
    end
    if getgenv().configs and getgenv().configs.connections then
        local Disable = getgenv().configs.Disable
        for _, v in ipairs(getgenv().configs.connections) do
            v:Disconnect()
        end
        Disable:Fire()
        Disable:Destroy()
        table.clear(getgenv().configs)
    end
end)

-- Draggable GUI
local dragging, dragInput, dragStart, startPos
TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Reach Distance TextBox Logic
local function updateReachDistance(newDistance)
    local distance = tonumber(newDistance)
    if distance and distance > 0 then
        Settings.ReachRadius = distance
    else
        Settings.ReachRadius = 0.1 -- Fallback for 0, negative, or non-numeric
    end
    ReachDistanceTextBox.Text = string.format("%.4f", Settings.ReachRadius)
end

ReachDistanceTextBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        updateReachDistance(ReachDistanceTextBox.Text)
    end
end)

-- Minus Button Logic
MinusButton.MouseButton1Click:Connect(function()
    local currentDistance = Settings.ReachRadius
    local newDistance = currentDistance - 0.5
    if newDistance <= 0 then
        newDistance = 0.1
    end
    updateReachDistance(newDistance)
end)

-- Plus Button Logic
PlusButton.MouseButton1Click:Connect(function()
    local currentDistance = Settings.ReachRadius
    updateReachDistance(currentDistance + 0.5)
end)

-- Sword Bot Script
_G.reachTarget = nil
_G.botTarget = nil
_G.huntTarget = nil
_G.huntMode = false
_G.reachMode = false
local lastBotActivation = 0
local reachCooldown = 0
Grips = {
    Up = CFrame.new(0, 0, -1.70000005, 0, 0, 1, 1, 0, 0, 0, 1, 0),
    Out = CFrame.new(0, 0, -1.70000005, 0, 1, 0, 1, -0, 0, 0, 0, -1)
}

_G.e = nil
_G.y = 0
local h3 = 0
local h4 = false
local h = Settings.StrafeDistance
local h2 = 0
_G.g = nil
_G.pos = nil
local jo = 0
local jo2 = 1
hhh = false
local jo3 = 0

-- Reach Script Setup
local connections = getgenv().configs and getgenv().configs.connections
if connections then
    local Disable = getgenv().configs.Disable
    for _, v in ipairs(connections) do
        v:Disconnect()
    end
    Disable:Fire()
    Disable:Destroy()
    table.clear(getgenv().configs)
end

local Disable = Instance.new("BindableEvent")
getgenv().configs = {
    connections = {},
    Disable = Disable,
}

local Ignorelist = OverlapParams.new()
Ignorelist.FilterType = Enum.RaycastFilterType.Include

local function getchar(plr)
    local plr = plr or player
    return plr.Character
end

local function gethumanoid(plr)
    local char = plr:IsA("Model") and plr or getchar(plr)
    if char then
        return char:FindFirstChildWhichIsA("Humanoid")
    end
end

local function IsAlive(Humanoid)
    return Humanoid and Humanoid.Health > 0
end

local function GetTouchInterest(Tool)
    if not Tool then return nil end
    local touch = Tool:FindFirstChildWhichIsA("TouchTransmitter", true)
    if not touch then
        for _, descendant in pairs(Tool:GetDescendants()) do
            if descendant:IsA("TouchTransmitter") then
                return descendant
            end
        end
    end
    return touch
end

local function GetCharacters(LocalPlayerChar)
    local Characters = {}
    for _, v in ipairs(Players:GetPlayers()) do
        local char = getchar(v)
        if char and char ~= LocalPlayerChar then
            table.insert(Characters, char)
        end
    end
    return Characters
end

local function Attack(Tool, TouchPart, ToTouch)
    if Tool:IsDescendantOf(Workspace) then
        firetouchinterest(TouchPart, ToTouch, 1)
        firetouchinterest(TouchPart, ToTouch, 0)
    end
end

-- Update TargetLabel based on mode priority
local function updateTargetLabel()
    if _G.y == 1 and _G.botTarget then
        TargetLabel.Text = "Target:\n" .. _G.botTarget.Name
    elseif _G.reachMode and _G.reachTarget then
        TargetLabel.Text = "Target:\n" .. _G.reachTarget.Name
    elseif _G.huntMode and _G.huntTarget then
        TargetLabel.Text = "Target:\n" .. _G.huntTarget.Name
    else
        TargetLabel.Text = "Target:\nNone"
    end
end

-- Ultra-Minimal Reach Loop
spawn(function()
    while true do
        task.wait(Settings.SwordSpamCooldown) -- 0.1s
        if _G.reachMode then
            local char = getchar()
            if not char or not char:FindFirstChild("HumanoidRootPart") then
                continue
            end

            local Tool = char:FindFirstChildWhichIsA("Tool")
            if not Tool then
                continue
            end

            -- Check for any player in range
            local inRange = false
            local closestDistance = math.huge
            local closestPlayer = nil
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= player then
                    local targetChar = getchar(plr)
                    if targetChar and targetChar:FindFirstChild("HumanoidRootPart") then
                        local dist = (char.HumanoidRootPart.Position - targetChar.HumanoidRootPart.Position).Magnitude
                        if dist < closestDistance then
                            closestDistance = dist
                            closestPlayer = plr
                        end
                        if dist <= Settings.SwordSpamDistance then
                            inRange = true
                            _G.reachTarget = targetChar
                            break
                        end
                    end
                end
            end

            if not inRange then
                _G.reachTarget = nil
            end

            updateTargetLabel()

            -- Spam Tool:Activate() if in range
            if inRange and tick() - reachCooldown >= Settings.SwordSpamCooldown then
                local success, _ = pcall(function()
                    Tool:Activate()
                end)
                if success then
                    reachCooldown = tick()
                end
            end

            -- Hitbox
            local TouchInterest = GetTouchInterest(Tool)
            local TouchPart = TouchInterest and TouchInterest.Parent
            if TouchPart then -- No need to skip hitbox since ReachRadius > 0
                local Characters = GetCharacters(char)
                Ignorelist.FilterDescendantsInstances = Characters
                local InstancesInRadius = Workspace:GetPartBoundsInRadius(TouchPart.Position, Settings.ReachRadius, Ignorelist)
                for _, v in ipairs(InstancesInRadius) do
                    local Character = v:FindFirstAncestorWhichIsA("Model")
                    if table.find(Characters, Character) then
                        if Settings.DeathCheck then
                            if IsAlive(gethumanoid(Character)) then
                                Attack(Tool, TouchPart, v)
                            end
                        else
                            Attack(Tool, TouchPart, v)
                        end
                    end
                end
            end
        else
            _G.reachTarget = nil
            updateTargetLabel()
        end
    end
end)

-- Find Closest HumanoidRootPart (Simplified, kept for Hunt/Bot)
local function findClosestHumanoidRootPart()
    local char = getchar()
    local localPlayerRoot = char and char:FindFirstChild("HumanoidRootPart")
    if not localPlayerRoot then return nil, nil end
    local localPlayerPosition = localPlayerRoot.Position

    local closestRootPart = nil
    local closestDistance = math.huge

    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= player then
            local targetChar = getchar(plr)
            local humanoid = targetChar and targetChar:FindFirstChild("Humanoid")
            local rootPart = targetChar and targetChar:FindFirstChild("HumanoidRootPart")
            if humanoid and rootPart and IsAlive(humanoid) then
                local distance = (rootPart.Position - localPlayerPosition).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestRootPart = targetChar
                end
            end
        end
    end
    return closestRootPart, closestDistance
end

-- Hunt Mode Targeting Loop
spawn(function()
    while true do
        task.wait(0.5) -- Check every 0.5s
        if _G.huntMode then
            local currentTarget = _G.huntTarget
            if not currentTarget or not currentTarget:FindFirstChild("Humanoid") or not IsAlive(currentTarget:FindFirstChild("Humanoid")) or not currentTarget:FindFirstChild("HumanoidRootPart") then
                local closestRootPart = findClosestHumanoidRootPart()
                if closestRootPart then
                    _G.huntTarget = closestRootPart
                    if _G.y == 1 then
                        _G.botTarget = _G.huntTarget -- Sync with Bot mode
                    end
                    updateTargetLabel()
                else
                    _G.huntTarget = nil
                    if _G.y == 1 then
                        _G.botTarget = nil
                    end
                    updateTargetLabel()
                end
            elseif _G.y == 1 then
                _G.botTarget = _G.huntTarget -- Keep Bot synced
                updateTargetLabel()
            end
        else
            _G.huntTarget = nil
            if _G.y == 1 then
                local closestRootPart = findClosestHumanoidRootPart()
                _G.botTarget = closestRootPart
            end
            updateTargetLabel()
        end
    end
end)

-- Auto-Target Function (Bot Mode, Always Nearest when not in Hunt)
spawn(function()
    local checkCount = 0
    while true do
        if _G.y == 1 and not _G.huntMode then
            local closestRootPart, closestDistance = findClosestHumanoidRootPart()
            if closestRootPart and (_G.botTarget ~= closestRootPart) then
                _G.botTarget = closestRootPart
                updateTargetLabel()
            elseif not closestRootPart and _G.botTarget ~= nil then
                _G.botTarget = nil
                updateTargetLabel()
            end

            checkCount = checkCount + 1
            if checkCount % 1000 == 0 then
                checkCount = 0
            end
        end
        task.wait(Settings.AutoTargetCheckInterval) -- ~1000Hz
    end
end)

-- Toggle Button Logic
local function toggleBot()
    if _G.y == 1 then
        _G.y = 0
        ToggleButton.Text = "Bot: OFF"
        ToggleButton.BackgroundColor3 = Settings.ButtonOffColor
        _G.botTarget = nil
        updateTargetLabel()
    else
        _G.y = 1
        ToggleButton.Text = "Bot: ON"
        ToggleButton.BackgroundColor3 = Settings.ButtonOnColor
        if _G.huntMode and _G.huntTarget then
            _G.botTarget = _G.huntTarget
        else
            local closestRootPart = findClosestHumanoidRootPart()
            _G.botTarget = closestRootPart
        end
        updateTargetLabel()
    end
end

ToggleButton.MouseButton1Click:Connect(toggleBot)

-- Hunt Button Logic
local function toggleHunt()
    if _G.huntMode then
        _G.huntMode = false
        HuntButton.Text = "Hunt: OFF"
        HuntButton.BackgroundColor3 = Settings.ButtonOffColor
        _G.huntTarget = nil
        if _G.y == 1 then
            local closestRootPart = findClosestHumanoidRootPart()
            _G.botTarget = closestRootPart
        end
        updateTargetLabel()
    else
        _G.huntMode = true
        HuntButton.Text = "Hunt: ON"
        HuntButton.BackgroundColor3 = Settings.ButtonOnColor
        local closestRootPart = findClosestHumanoidRootPart()
        if closestRootPart then
            _G.huntTarget = closestRootPart
            if _G.y == 1 then
                _G.botTarget = _G.huntTarget
            end
            updateTargetLabel()
        else
            _G.huntMode = false
            HuntButton.Text = "Hunt: OFF"
            HuntButton.BackgroundColor3 = Settings.ButtonOffColor
            updateTargetLabel()
        end
    end
end

HuntButton.MouseButton1Click:Connect(toggleHunt)

-- Reach Button Logic
local function toggleReach()
    if _G.reachMode then
        _G.reachMode = false
        ReachButton.Text = "Reach: OFF"
        ReachButton.BackgroundColor3 = Settings.ButtonOffColor
        _G.reachTarget = nil
        updateTargetLabel()
        if getgenv().configs and getgenv().configs.connections then
            local Disable = getgenv().configs.Disable
            for _, v in ipairs(getgenv().configs.connections) do
                v:Disconnect()
            end
            Disable:Fire()
            table.clear(getgenv().configs.connections)
        end
    else
        _G.reachMode = true
        ReachButton.Text = "Reach: ON"
        ReachButton.BackgroundColor3 = Settings.ButtonOnColor
    end
end

ReachButton.MouseButton1Click:Connect(toggleReach)

-- Keybinds
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.KeyCode == Enum.KeyCode.R then
        toggleBot()
    elseif input.KeyCode == Enum.KeyCode.H then
        toggleHunt()
    elseif input.KeyCode == Enum.KeyCode.T then
        toggleReach()
    end
end)

-- Original Script Core
local numba = Instance.new("NumberValue", Workspace)
numba.Value = -40
delay(0, function()
    while true do
        task.wait(0.14)
        numba.Value = math.random(Settings.CirclingMin, -40)
        game.TweenService:Create(numba, TweenInfo.new(0.07, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 1, true, 0), { Value = math.random(40, Settings.CirclingMax) }):Play()
    end
end)

delay(5, function()
    bg = Instance.new("BodyGyro", ReplicatedStorage)
    bg.D = 1
    bg.CFrame = CFrame.new(player.Character and player.Character.HumanoidRootPart and player.Character.HumanoidRootPart.CFrame.LookVector or Vector3.new(0, 0, 1))
    bg.P = 30000
    bg.MaxTorque = Vector3.new(400000000, 400000000, 400000000)

    RunService.RenderStepped:Connect(function()
        if _G.botTarget ~= nil and _G.botTarget:FindFirstChild("HumanoidRootPart") and _G.y == 1 and player.Character and player.Character.Humanoid.Health > 0 then
            if _G.botTarget:FindFirstChild("Humanoid") and _G.botTarget.Humanoid.Health > 0 then
                bg.Parent = player.Character.HumanoidRootPart
                local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                local torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                if h2 == 0 then
                    torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                elseif h2 == 1 then
                    torso2 = _G.botTarget.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / Settings.CirclingDivider)
                end
                bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(Settings.LookAngle), 0)
                _G.pos = _G.botTarget["HumanoidRootPart"].Position + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * -1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * 0 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6

                if _G.botTarget.HumanoidRootPart.Position.y - 0.5 > player.Character.HumanoidRootPart.Position.y then
                    delay(0, function() player.Character.Humanoid.Jump = true end)
                end
                if _G.botTarget.HumanoidRootPart.Velocity.z >= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.botTarget.HumanoidRootPart.Velocity.x >= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                    _G.pos = _G.botTarget["HumanoidRootPart"].Position + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * -1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * -1 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6 - _G.botTarget.HumanoidRootPart.Velocity / 2
                    local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                    local torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                    if h2 == 0 then
                        torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                    elseif h2 == 1 then
                        torso2 = _G.botTarget.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / Settings.CirclingDivider)
                    end
                    bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(Settings.LookAngle), 0)
                    if (_G.botTarget["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 15 then
                        _G.pos = _G.botTarget["HumanoidRootPart"].Position + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * -1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character["HumanoidRootPart"].CFrame.RightVector * 1 + player.Character["HumanoidRootPart"].CFrame.LookVector * -1) - _G.botTarget.HumanoidRootPart.Velocity / 5 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                        jo = jo + 1
                        if jo == 3 then
                            h = h * -1
                        end
                    end
                elseif _G.botTarget.HumanoidRootPart.Velocity.z <= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.botTarget.HumanoidRootPart.Velocity.x <= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                    _G.pos = _G.botTarget["HumanoidRootPart"].Position + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * -1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * -1 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6 + _G.botTarget.HumanoidRootPart.Velocity / 10
                    local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                    local torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                    if h2 == 0 then
                        torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                    elseif h2 == 1 then
                        torso2 = _G.botTarget.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / Settings.CirclingDivider)
                    end
                    bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(Settings.LookAngle), 0)
                    if (_G.botTarget["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 15 then
                        _G.pos = _G.botTarget["HumanoidRootPart"].Position + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * 1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character["HumanoidRootPart"].CFrame.RightVector * 1 + player.Character["HumanoidRootPart"].CFrame.LookVector * -1) + _G.botTarget.HumanoidRootPart.Velocity / 3 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                        jo = jo + 1
                        if jo == 3 then
                            h = h * -1
                        end
                    end
                end
                if (_G.botTarget["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 15 then
                    h2 = 1
                else
                    h2 = 0
                end
                -- Always spam sword in Bot mode
                local Tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
                if Tool and tick() - lastBotActivation >= Settings.SwordSpamCooldown then
                    Tool:Activate()
                    lastBotActivation = tick()
                end
                -- Movement logic with hhh for close-range circling
                local distance = (_G.botTarget["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).Magnitude
                if distance <= 15 then
                    if (_G.botTarget["HumanoidRootPart"].Position - player.Character["Right Arm"].CFrame.p).magnitude <= 15 or hhh == true then
                        hhh = true
                        if (_G.botTarget["HumanoidRootPart"].Position - player.Character["Right Arm"].CFrame.p).magnitude >= 15 + 2 then
                            hhh = false
                        end
                        if jo2 == 0 then
                            jo2 = -2
                        else
                            jo2 = 0
                        end
                        _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.botTarget.HumanoidRootPart.Velocity / 20
                        if _G.botTarget.HumanoidRootPart.Velocity.z >= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.botTarget.HumanoidRootPart.Velocity.x >= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                            _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * -1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * -1 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6 - _G.botTarget.HumanoidRootPart.Velocity / 2
                            local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                            local torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                            if h2 == 0 then
                                torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                            elseif h2 == 1 then
                                torso2 = _G.botTarget.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / Settings.CirclingDivider)
                            end
                            bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(Settings.LookAngle), 0)
                            bg.D = 1
                            if (_G.botTarget["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 15 then
                                _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * -1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character["HumanoidRootPart"].CFrame.RightVector * 1 + player.Character["HumanoidRootPart"].CFrame.LookVector * -1) - _G.botTarget.HumanoidRootPart.Velocity / 5 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                                jo = jo + 1
                                if jo == 3 then
                                    h = h * -1
                                end
                            end
                        elseif _G.botTarget.HumanoidRootPart.Velocity.z <= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.botTarget.HumanoidRootPart.Velocity.x <= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                            _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * -1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * -1 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6 + _G.botTarget.HumanoidRootPart.Velocity / 10
                            local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                            local torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                            if h2 == 0 then
                                torso2 = _G.botTarget.HumanoidRootPart.Position + _G.botTarget.HumanoidRootPart.Velocity / 10
                            elseif h2 == 1 then
                                torso2 = _G.botTarget.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / Settings.CirclingDivider)
                            end
                            bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(Settings.LookAngle), 0)
                            if (_G.botTarget["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 15 then
                                _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.botTarget["HumanoidRootPart"].CFrame.RightVector * 1 + _G.botTarget.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character["HumanoidRootPart"].CFrame.RightVector * 1 + player.Character["HumanoidRootPart"].CFrame.LookVector * -1) + _G.botTarget.HumanoidRootPart.Velocity / 3 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                                jo = jo + 1
                                if jo == 3 then
                                    h = h * -1
                                end
                            end
                        end
                        player.Character.Humanoid:Move(_G.pos)
                    end
                end
                player.Character.Humanoid:MoveTo(_G.pos)
                if _G.botTarget:FindFirstChildOfClass("Tool") and _G.botTarget:FindFirstChildOfClass("Tool"):FindFirstChild("Handle") then
                end
            else
                if _G.huntMode then
                    _G.botTarget = _G.huntTarget
                    updateTargetLabel()
                else
                    _G.botTarget = nil
                    updateTargetLabel()
                end
            end
        else
            bg.Parent = ReplicatedStorage
        end
    end)
end)
