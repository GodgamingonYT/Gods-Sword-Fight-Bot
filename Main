local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer

-- Randomize Name Function
local function generateRandomName()
    local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local name = ""
    for _ = 1, 32 do
        name = name .. chars:sub(math.random(1, #chars), math.random(1, #chars))
    end
    return name
end

-- UI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = generateRandomName()
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = CoreGui

local MainFrame = Instance.new("Frame")
MainFrame.Name = generateRandomName()
MainFrame.Size = UDim2.new(0, 200, 0, 180)
MainFrame.Position = UDim2.new(0.5, -100, 0.5, -90)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local UICorner = Instance.new("UICorner")
UICorner.Name = generateRandomName()
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = MainFrame

local TitleBar = Instance.new("Frame")
TitleBar.Name = generateRandomName()
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainFrame

local TitleCorner = Instance.new("UICorner")
TitleCorner.Name = generateRandomName()
TitleCorner.CornerRadius = UDim.new(0, 10)
TitleCorner.Parent = TitleBar

local Title = Instance.new("TextLabel")
Title.Name = generateRandomName()
Title.Size = UDim2.new(0.7, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Text = "Sword Bot"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 16
Title.Font = Enum.Font.GothamBold
Title.Parent = TitleBar

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = generateRandomName()
MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
MinimizeButton.Position = UDim2.new(1, -60, 0, 0)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
MinimizeButton.Text = "−"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 20
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Parent = TitleBar

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.Name = generateRandomName()
MinimizeCorner.CornerRadius = UDim.new(0, 10)
MinimizeCorner.Parent = MinimizeButton

local CloseButton = Instance.new("TextButton")
CloseButton.Name = generateRandomName()
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -30, 0, 0)
CloseButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 220, 220)
CloseButton.TextSize = 20
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Parent = TitleBar

local ClearCorner = Instance.new("UICorner")
ClearCorner.Name = generateRandomName()
ClearCorner.CornerRadius = UDim.new(0, 10)
ClearCorner.Parent = CloseButton

local ContentFrame = Instance.new("Frame")
ContentFrame.Name = generateRandomName()
ContentFrame.Size = UDim2.new(1, 0, 1, -30)
ContentFrame.Position = UDim2.new(0, 0, 0, 30)
ContentFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
ContentFrame.BorderSizePixel = 0
ContentFrame.Parent = MainFrame

local ContentCorner = Instance.new("UICorner")
ContentCorner.Name = generateRandomName()
ContentCorner.CornerRadius = UDim.new(0, 10)
ContentCorner.Parent = ContentFrame

local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = generateRandomName()
ToggleButton.Size = UDim2.new(0, 120, 0, 40)
ToggleButton.Position = UDim2.new(0.5, -60, 0, 20)
ToggleButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
ToggleButton.Text = "Bot: OFF"
ToggleButton.TextColor3 = Color3.fromRGB(220, 255, 220)
ToggleButton.TextSize = 14
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Parent = ContentFrame

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.Name = generateRandomName()
ToggleCorner.CornerRadius = UDim.new(0, 10)
ToggleCorner.Parent = ToggleButton

local HuntButton = Instance.new("TextButton")
HuntButton.Name = generateRandomName()
HuntButton.Size = UDim2.new(0, 120, 0, 40)
HuntButton.Position = UDim2.new(0.5, -60, 0, 70)
HuntButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
HuntButton.Text = "Hunt: OFF"
HuntButton.TextColor3 = Color3.fromRGB(220, 255, 220)
HuntButton.TextSize = 14
HuntButton.Font = Enum.Font.GothamBold
HuntButton.Parent = ContentFrame

local HuntCorner = Instance.new("UICorner")
HuntCorner.Name = generateRandomName()
HuntCorner.CornerRadius = UDim.new(0, 10)
HuntCorner.Parent = HuntButton

-- UI Functionality
local minimized = false
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)

MinimizeButton.MouseButton1Click:Connect(function()
    if minimized then
        local tween = TweenService:Create(MainFrame, tweenInfo, {Size = UDim2.new(0, 200, 0, 180)})
        tween:Play()
        tween.Completed:Wait()
        MinimizeButton.Text = "−"
        ContentFrame.Visible = true
        minimized = false
    else
        local tween = TweenService:Create(MainFrame, tweenInfo, {Size = UDim2.new(0, 200, 0, 30)})
        ContentFrame.Visible = false
        tween:Play()
        tween.Completed:Wait()
        MinimizeButton.Text = "+"
        minimized = true
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(MainFrame, tweenInfo, {
        Size = UDim2.new(0, 200, 0, 0),
        BackgroundTransparency = 1
    })
    tween:Play()
    for _, child in pairs(MainFrame:GetDescendants()) do
        if child:IsA("GuiObject") then
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                TweenService:Create(child, tweenInfo, {TextTransparency = 1, BackgroundTransparency = 1}):Play()
            elseif child:IsA("Frame") then
                TweenService:Create(child, tweenInfo, {BackgroundTransparency = 1}):Play()
            end
        end
    end
    tween.Completed:Wait()
    ScreenGui:Destroy()
    if _G.e then
        _G.e:Disconnect()
    end
end)

-- Draggable GUI
local dragging, dragInput, dragStart, startPos
TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Sword Bot Script
_G.x = nil -- target, dont change
_G.huntMode = false -- Hunt mode state
print("h:loaded (  :")
Grips = {
    Up = CFrame.new(0, 0, -1.70000005, 0, 0, 1, 1, 0, 0, 0, 1, 0),
    Out = CFrame.new(0, 0, -1.70000005, 0, 1, 0, 1, -0, 0, 0, 0, -1)
}

_G.e = nil
_G.y = 0 -- Initialize bot as off
local h3 = 0
local h4 = false
local h = 3
local h2 = 0
_G.g = nil
_G.pos = nil
local jo = 0
local jo2 = 1
hhh = false
local jo3 = 0

-- Toggle Button Logic
local function toggleBot()
    if _G.y == 1 then
        _G.y = 0
        ToggleButton.Text = "Bot: OFF"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
        print("Off y")
        game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
            Text = "y = " .. _G.y,
            Color = Color3.fromRGB(255, 255, 0),
            Font = Enum.Font.SourceSansBold,
            TextSize = 18
        })
    else
        _G.y = 1
        ToggleButton.Text = "Bot: ON"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(70, 130, 70)
        print("On y")
        game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
            Text = "y = " .. _G.y,
            Color = Color3.fromRGB(255, 255, 0),
            Font = Enum.Font.SourceSansBold,
            TextSize = 18
        })
    end
end

ToggleButton.MouseButton1Click:Connect(toggleBot)

-- Hunt Button Logic
local function toggleHunt()
    if _G.huntMode then
        _G.huntMode = false
        HuntButton.Text = "Hunt: OFF"
        HuntButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
        print("Hunt mode off")
        game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
            Text = "Hunt Mode: OFF",
            Color = Color3.fromRGB(255, 255, 0),
            Font = Enum.Font.SourceSansBold,
            TextSize = 18
        })
    else
        _G.huntMode = true
        HuntButton.Text = "Hunt: ON"
        HuntButton.BackgroundColor3 = Color3.fromRGB(70, 130, 70)
        -- Lock onto current nearest target
        local closestRootPart = findClosestHumanoidRootPart()
        if closestRootPart then
            _G.x = closestRootPart
            print("Locked onto: " .. _G.x.Name)
            game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
                Text = "Hunt Mode: ON, Locked onto: " .. _G.x.Name,
                Color = Color3.fromRGB(0, 255, 255),
                Font = Enum.Font.SourceSansBold,
                TextSize = 18
            })
        else
            _G.huntMode = false
            HuntButton.Text = "Hunt: OFF"
            HuntButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
            print("No target found, Hunt mode off")
            game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
                Text = "No target found, Hunt Mode: OFF",
                Color = Color3.fromRGB(255, 0, 0),
                Font = Enum.Font.SourceSansBold,
                TextSize = 18
            })
        end
    end
end

HuntButton.MouseButton1Click:Connect(toggleHunt)

-- Keybinds
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.KeyCode == Enum.KeyCode.R then
        toggleBot()
    elseif input.KeyCode == Enum.KeyCode.H then
        toggleHunt()
    end
end)

-- Modified find closest function
local function findClosestHumanoidRootPart()
    local closestRootPart = nil
    local closestDistance = math.huge
    local localPlayerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position

    if not localPlayerPosition then return nil end

    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name == "HumanoidRootPart" and part.Parent ~= player.Character then
            local humanoid = part.Parent:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local distance = (part.Position - localPlayerPosition).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestRootPart = part.Parent
                end
            end
        end
    end
    return closestRootPart
end

-- Modified auto-target function
local function autoTarget()
    -- Check if current target is invalid
    if _G.x and (_G.x:FindFirstChild("Humanoid") == nil or _G.x.Humanoid.Health <= 0) then
        _G.x = nil
        if _G.huntMode then
            _G.huntMode = false
            HuntButton.Text = "Hunt: OFF"
            HuntButton.BackgroundColor3 = Color3.fromRGB(140, 50, 50)
            print("Hunt target died, Hunt mode off")
            game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
                Text = "Hunt target died, Hunt Mode: OFF",
                Color = Color3.fromRGB(255, 0, 0),
                Font = Enum.Font.SourceSansBold,
                TextSize = 18
            })
        end
    end

    if not _G.huntMode or not _G.x then
        local closestRootPart = findClosestHumanoidRootPart()
        if closestRootPart then
            if _G.x and _G.x:FindFirstChild("HumanoidRootPart") and _G.x.Humanoid.Health > 0 then
                -- Compare distances only if not in Hunt Mode
                if not _G.huntMode then
                    local currentDist = (_G.x.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    local closestDist = (closestRootPart.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if closestRootPart ~= _G.x and closestDist < currentDist then
                        _G.x = closestRootPart
                        print("Switched to closer target: " .. _G.x.Name)
                        game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
                            Text = "Switched target to: " .. _G.x.Name,
                            Color = Color3.fromRGB(0, 255, 255),
                            Font = Enum.Font.SourceSansBold,
                            TextSize = 18
                        })
                    end
                end
            else
                -- Set new target
                _G.x = closestRootPart
                if _G.x then
                    print("Auto-targeting: " .. _G.x.Name)
                    game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", {
                        Text = "Auto-targeting: " .. _G.x.Name,
                        Color = Color3.fromRGB(0, 255, 255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 18
                    })
                end
            end
        else
            _G.x = nil
        end
    end
end

-- RunService for auto-targeting
RunService.Heartbeat:Connect(function()
    if _G.y == 1 then
        autoTarget()
    end
end)

-- Original script core
local numba = Instance.new("NumberValue", Workspace)
numba.Value = -40
delay(0, function()
    while true do
        wait(0.14)
        numba.Value = math.random(-90, -35)
        game.TweenService:Create(numba, TweenInfo.new(0.07, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 1, true, 0), { Value = math.random(35, 90) }):Play()
    end
end)

delay(5, function()
    bg = Instance.new("BodyGyro", ReplicatedStorage)
    bg.D = 1
    bg.CFrame = CFrame.new(player.Character and player.Character.HumanoidRootPart and player.Character.HumanoidRootPart.CFrame.LookVector or Vector3.new(0, 0, 1))
    bg.P = 30000
    bg.MaxTorque = Vector3.new(400000000, 400000000, 400000000)

    RunService.RenderStepped:Connect(function()
        if _G.x ~= nil and _G.x:FindFirstChild("HumanoidRootPart") and _G.y == 1 and player.Character and player.Character.Humanoid.Health > 0 then
            if _G.x:FindFirstChild("Humanoid") and _G.x.Humanoid.Health > 0 then
                bg.Parent = player.Character.HumanoidRootPart
                local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                if h2 == 0 then
                    torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                elseif h2 == 1 then
                    torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 25)
                end
                -- Apply 25-degree leftward rotation
                bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(25), 0)
                _G.pos = _G.x["HumanoidRootPart"].Position + _G.x["HumanoidRootPart"].CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * 0 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6

                if _G.x.HumanoidRootPart.Position.y - 0.5 > player.Character.HumanoidRootPart.Position.y then
                    delay(0, function() player.Character.Humanoid.Jump = true end)
                end
                if _G.x.HumanoidRootPart.Velocity.z >= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.x.HumanoidRootPart.Velocity.x >= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                    _G.pos = _G.x["HumanoidRootPart"].Position + _G.x["HumanoidRootPart"].CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6 - _G.x.HumanoidRootPart.Velocity / 2
                    local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                    local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                    if h2 == 0 then
                        torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                    elseif h2 == 1 then
                        torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 25)
                    end
                    bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(25), 0)
                    if (_G.x["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 10 then
                        _G.pos = _G.x["HumanoidRootPart"].Position + _G.x["HumanoidRootPart"].CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character["HumanoidRootPart"].CFrame.RightVector * 1 + player.Character["HumanoidRootPart"].CFrame.LookVector * -1) - _G.x.HumanoidRootPart.Velocity / 5 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                        jo = jo + 1
                        if jo == 3 then
                            h = h * -1
                        end
                    end
                elseif _G.x.HumanoidRootPart.Velocity.z <= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.x.HumanoidRootPart.Velocity.x <= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                    _G.pos = _G.x["HumanoidRootPart"].Position + _G.x["HumanoidRootPart"].CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6 + _G.x.HumanoidRootPart.Velocity / 10
                    local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                    local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                    if h2 == 0 then
                        torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                    elseif h2 == 1 then
                        torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 25)
                    end
                    bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(20), 0)
                    if (_G.x["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 10 then
                        _G.pos = _G.x["HumanoidRootPart"].Position + _G.x["HumanoidRootPart"].CFrame.RightVector * 1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character["HumanoidRootPart"].CFrame.RightVector * 1 + player.Character["HumanoidRootPart"].CFrame.LookVector * -1) + _G.x.HumanoidRootPart.Velocity / 3 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                        jo = jo + 1
                        if jo == 3 then
                            h = h * -1
                        end
                    end
                end
                if (_G.x["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 10 then
                    h2 = 1
                else
                    h2 = 0
                end
                if (_G.x["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 20 then
                    if (_G.x["HumanoidRootPart"].Position - player.Character["Right Arm"].CFrame.p).magnitude <= 5 or hhh == true then
                        hhh = true
                        if (_G.x["HumanoidRootPart"].Position - player.Character["Right Arm"].CFrame.p).magnitude >= 7 then
                            hhh = false
                        end
                        jo3 = jo3 + 1
                        if jo3 >= math.random(2, 4) then
                            jo3 = 0
                            if jo2 == 0 then
                                jo2 = -2
                            else
                                jo2 = 0
                            end
                        end
                        _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.x.HumanoidRootPart.Velocity / 20
                        if _G.x.HumanoidRootPart.Velocity.z >= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.x.HumanoidRootPart.Velocity.x >= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                            _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.x["HumanoidRootPart"].CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6 - _G.x.HumanoidRootPart.Velocity / 2
                            local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                            local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                            if h2 == 0 then
                                torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                            elseif h2 == 1 then
                                torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 25)
                            end
                            bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(20), 0)
                            bg.D = 1
                            if (_G.x["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 10 then
                                _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.x["HumanoidRootPart"].CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character["HumanoidRootPart"].CFrame.RightVector * 1 + player.Character["HumanoidRootPart"].CFrame.LookVector * -1) - _G.x.HumanoidRootPart.Velocity / 5 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                                jo = jo + 1
                                if jo == 3 then
                                    h = h * -1
                                end
                            end
                        elseif _G.x.HumanoidRootPart.Velocity.z <= player.Character.HumanoidRootPart.CFrame.LookVector.z or _G.x.HumanoidRootPart.Velocity.x <= player.Character.HumanoidRootPart.CFrame.LookVector.x then
                            _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.x["HumanoidRootPart"].CFrame.RightVector * -1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + player.Character["HumanoidRootPart"].CFrame.RightVector * 6 + _G.x.HumanoidRootPart.Velocity / 10
                            local torso = player.Character.HumanoidRootPart.CFrame.p + player.Character.HumanoidRootPart.CFrame.LookVector * 1 + player.Character.HumanoidRootPart.CFrame.RightVector * 1
                            local torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                            if h2 == 0 then
                                torso2 = _G.x.HumanoidRootPart.Position + _G.x.HumanoidRootPart.Velocity / 10
                            elseif h2 == 1 then
                                torso2 = _G.x.HumanoidRootPart.Position + player.Character.HumanoidRootPart.CFrame.RightVector * (numba.Value / 25)
                            end
                            bg.CFrame = CFrame.new(torso - Vector3.new(0, torso.y, 0), torso2 - Vector3.new(0, torso2.y, 0)) * CFrame.Angles(0, math.rad(20), 0)
                            if (_G.x["HumanoidRootPart"].Position - player.Character["HumanoidRootPart"].CFrame.p).magnitude <= 10 then
                                _G.pos = player.Character["HumanoidRootPart"].CFrame.LookVector * 5 * jo2 + _G.x["HumanoidRootPart"].CFrame.RightVector * 1 + _G.x.HumanoidRootPart.CFrame.LookVector * -1 + (player.Character["HumanoidRootPart"].CFrame.RightVector * 1 + player.Character["HumanoidRootPart"].CFrame.LookVector * -1) + _G.x.HumanoidRootPart.Velocity / 3 + player.Character.HumanoidRootPart.CFrame.RightVector * h
                                jo = jo + 1
                                if jo == 3 then
                                    h = h * -1
                                end
                            end
                        end
                        player.Character.Humanoid:Move(_G.pos)
                    end
                    if player.Character:FindFirstChildOfClass("Tool") then
                        player.Character:FindFirstChildOfClass("Tool"):Activate()
                    end
                end
                player.Character.Humanoid:MoveTo(_G.pos)
                if _G.x:FindFirstChildOfClass("Tool") and _G.x:FindFirstChildOfClass("Tool"):FindFirstChild("Handle") then
                end
            else
                _G.x = nil
            end
        else
            bg.Parent = ReplicatedStorage
        end
    end)
end)
